= Editing Plist Files

== Plist Types

Its important to understand that there are potentially different types of Plist file. These "Plist Types" determine the methods and options available to you for setting plist keys in the plist file.

If you are developing a custom application, and intend to exchange data in a custom plist file format, it may be worth writing a custom Plist Type. In which case please see the {file:DeveloperGuide} for more info.

For these following examples, we will use {Plist4r::PlistType::Launchd}.

== Editing

When we wish to perform an edit operation on a plist object, we (almost always) are calling an accessor method on the Plist Object. We may call the method directly on the object, like this

  launchd_plist.watch_paths ["/path1", "/path2", ...]

However it gets a bit repetitive when there are many such plist keys to set

  launchd_plist.label "com.mydomain.myapp"
  launchd_plist.program "/path/to/myapp"
  launchd_plist.launch_only_once true
  # etc...
  launchd_plist.save

=== plist.edit do

So instead we can invoke an convenience edit block on our plist object, which will just instance_eval(&blk) the block.

  launchd_plist.edit do
    label "com.mydomain.myapp"
    program "/path/to/myapp"
    launch_only_once true
    # etc...
    save
  end

=== plist.<< do

The << operator can alternatively be used, interchangeably. Its just another way of writing plist.edit. 

  launchd_plist.<< do
    label "com.mydomain.myapp"
    program "/path/to/myapp"
    launch_only_once true
  end
  launchd_plist.save

== Editing operations

Certain kinds of edit operation are available on the plist keys. These are useful when we want to treat the plist keys like we would an Array object or a Hash object. Methods select, map/collect, delete_if, clear and similar. These methods are all documented as part of  {Plist4r::Plist}.

